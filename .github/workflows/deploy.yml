name: Fully Automated Azure Deployment

on:
  push:
    branches: [master]

env:
  RESOURCE_GROUP: "auto-deploy-rg-$(date +%s)"
  LOCATION: "eastus"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ssh_public_key: ${{ steps.generate-ssh.outputs.public_key }}
      ssh_private_key: ${{ steps.generate-ssh.outputs.private_key }}

    steps:
      - name: Generate SSH Key Pair
        id: generate-ssh
        run: |
          mkdir -p ./ssh
          ssh-keygen -t rsa -b 4096 -f ./ssh/id_rsa -N '' -q
          echo "public_key=$(cat ./ssh/id_rsa.pub)" >> $GITHUB_OUTPUT
          echo "private_key<<EOF" >> $GITHUB_OUTPUT
          cat ./ssh/id_rsa >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure Terraform Variables
        run: |
          cat > terraform.tfvars <<EOF
          resource_group_name = "${{ env.RESOURCE_GROUP }}"
          location = "${{ env.LOCATION }}"
          ssh_public_key = "${{ needs.setup.outputs.ssh_public_key }}"
          EOF

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get VM IP
        run: echo "VM_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

      - name: Setup Docker and Deploy App
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.VM_IP }}
          username: azureuser
          key: ${{ needs.setup.outputs.ssh_private_key }}
          script: |
            # Install Docker
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl enable --now docker
            
            # Deploy application
            cd /home/azureuser/app
            docker compose up -d

  cleanup:
    needs: [setup, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Delete Resource Group
        run: |
          az group delete \
            --name "${{ env.RESOURCE_GROUP }}" \
            --yes \
            --no-wait
